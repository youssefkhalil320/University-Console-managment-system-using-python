import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QMessageBox)
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import Qt
from modules.StudentManagemnt import *
from modules.WorkerManagement import *

# Global variables for window dimensions, positions, and font settings
WINDOW_X = 100
WINDOW_Y = 100
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
SUBWINDOW_WIDTH = 600
SUBWINDOW_HEIGHT = 400
MAIN_FONT = QFont("Arial", 14)
TITLE_FONT = QFont("Arial", 18, QFont.Bold)
BUTTON_FONT = QFont("Arial", 12)

class UniversityManagementApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('University Management Application')
        self.setGeometry(WINDOW_X, WINDOW_Y, WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # Setting an icon for the application
        self.setWindowIcon(QIcon('images/icon.jpg'))

        main_layout = QVBoxLayout()

        title = QLabel("University Management System", self)
        title.setFont(TITLE_FONT)
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("background-color: #F5F5DC; padding: 10px; border-radius: 5px;")
        main_layout.addWidget(title)

        btn_student = QPushButton("Manage Students", self)
        btn_student.setFont(MAIN_FONT)
        btn_student.clicked.connect(self.student_management)
        btn_student.setStyleSheet("background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px;")
        main_layout.addWidget(btn_student)

        btn_worker = QPushButton("Manage Workers", self)
        btn_worker.setFont(MAIN_FONT)
        btn_worker.clicked.connect(self.worker_management)
        btn_worker.setStyleSheet("background-color: #2196F3; color: white; padding: 10px; border-radius: 5px;")
        main_layout.addWidget(btn_worker)

        self.setLayout(main_layout)

    def student_management(self):
        self.student_window = StudentManagementWindow()
        self.student_window.show()
        self.hide()

    def worker_management(self):
        self.worker_window = WorkerManagementWindow()
        self.worker_window.show()
        self.hide()

class StudentManagementWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Student Management')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        title = QLabel("Manage Students", self)
        title.setFont(TITLE_FONT)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        btn_add_student = QPushButton("Add Student", self)
        btn_add_student.setFont(BUTTON_FONT)
        btn_add_student.clicked.connect(self.add_student_ui)
        layout.addWidget(btn_add_student)

        btn_find_student = QPushButton("Find Student", self)
        btn_find_student.setFont(BUTTON_FONT)
        btn_find_student.clicked.connect(self.find_student_ui)
        layout.addWidget(btn_find_student)

        btn_sort_students = QPushButton("Sort Students", self)
        btn_sort_students.setFont(BUTTON_FONT)
        btn_sort_students.clicked.connect(self.sort_students_ui)
        layout.addWidget(btn_sort_students)

        btn_back = QPushButton("Back", self)
        btn_back.setFont(BUTTON_FONT)
        btn_back.clicked.connect(self.back_to_main)
        layout.addWidget(btn_back)

        self.setLayout(layout)

    def add_student_ui(self):
        self.add_student_window = AddStudentWindow()
        self.add_student_window.show()
        self.hide()

    def find_student_ui(self):
        self.find_student_window = FindStudentWindow()
        self.find_student_window.show()
        self.hide()

    def sort_students_ui(self):
        self.sort_students_window = SortStudentsWindow()
        self.sort_students_window.show()
        self.hide()

    def back_to_main(self):
        self.main_window = UniversityManagementApp()
        self.main_window.show()
        self.close()

class AddStudentWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Add Student')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        self.name_input = QLineEdit(self)
        self.name_input.setPlaceholderText("Enter student name")
        layout.addWidget(self.name_input)

        self.id_input = QLineEdit(self)
        self.id_input.setPlaceholderText("Enter student ID")
        layout.addWidget(self.id_input)

        self.dob_input = QLineEdit(self)
        self.dob_input.setPlaceholderText("Enter student's date of birth")
        layout.addWidget(self.dob_input)

        self.nat_input = QLineEdit(self)
        self.nat_input.setPlaceholderText("Enter student's nationality")
        layout.addWidget(self.nat_input)

        self.gender_input = QLineEdit(self)
        self.gender_input.setPlaceholderText("Enter student's gender")
        layout.addWidget(self.gender_input)

        add_button = QPushButton("Add Student", self)
        add_button.setFont(BUTTON_FONT)
        add_button.clicked.connect(self.add_student)
        layout.addWidget(add_button)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def add_student(self):
        name = self.name_input.text()
        sid = self.id_input.text()
        dob = self.dob_input.text()
        nat = self.nat_input.text()
        gender = self.gender_input.text()
        new_student = Student(name, int(sid), dob, nat, gender)
        add_student(new_student)
        QMessageBox.information(self, "Success", "Student added successfully!")

    def back_to_options(self):
        self.main_window = StudentManagementWindow()
        self.main_window.show()
        self.close()

class FindStudentWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Find Student')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        self.search_input = QLineEdit(self)
        self.search_input.setPlaceholderText("Enter student name or ID")
        layout.addWidget(self.search_input)

        find_button = QPushButton("Find Student", self)
        find_button.setFont(BUTTON_FONT)
        find_button.clicked.connect(self.find_student)
        layout.addWidget(find_button)

        self.result_label = QLabel("", self)
        self.result_label.setFont(BUTTON_FONT)
        layout.addWidget(self.result_label)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def find_student(self):
        search_term = self.search_input.text()
        if search_term.isdigit():
            result = find_student_by_id(int(search_term))
        else:
            result = find_student_by_name(search_term)
        self.result_label.setText(result if result else "Student not found")

    def back_to_options(self):
        self.main_window = StudentManagementWindow()
        self.main_window.show()
        self.close()

class SortStudentsWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Sort Students')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        sort_name_button = QPushButton("Sort by Name", self)
        sort_name_button.setFont(BUTTON_FONT)
        sort_name_button.clicked.connect(self.sort_by_name)
        layout.addWidget(sort_name_button)

        sort_id_button = QPushButton("Sort by ID", self)
        sort_id_button.setFont(BUTTON_FONT)
        sort_id_button.clicked.connect(self.sort_by_id)
        layout.addWidget(sort_id_button)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def sort_by_name(self):
        sort_student_by_name()
        QMessageBox.information(self, "Success", "Students sorted by name!")

    def sort_by_id(self):
        sort_student_by_id()
        QMessageBox.information(self, "Success", "Students sorted by ID!")

    def back_to_options(self):
        self.main_window = StudentManagementWindow()
        self.main_window.show()
        self.close()

class WorkerManagementWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Worker Management')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        title = QLabel("Manage Workers", self)
        title.setFont(TITLE_FONT)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        btn_add_worker = QPushButton("Add Worker", self)
        btn_add_worker.setFont(BUTTON_FONT)
        btn_add_worker.clicked.connect(self.add_worker_ui)
        layout.addWidget(btn_add_worker)

        btn_find_worker = QPushButton("Find Worker", self)
        btn_find_worker.setFont(BUTTON_FONT)
        btn_find_worker.clicked.connect(self.find_worker_ui)
        layout.addWidget(btn_find_worker)

        btn_sort_workers = QPushButton("Sort Workers", self)
        btn_sort_workers.setFont(BUTTON_FONT)
        btn_sort_workers.clicked.connect(self.sort_workers_ui)
        layout.addWidget(btn_sort_workers)

        btn_back = QPushButton("Back", self)
        btn_back.setFont(BUTTON_FONT)
        btn_back.clicked.connect(self.back_to_main)
        layout.addWidget(btn_back)

        self.setLayout(layout)

    def add_worker_ui(self):
        self.add_worker_window = AddWorkerWindow()
        self.add_worker_window.show()
        self.hide()

    def find_worker_ui(self):
        self.find_worker_window = FindWorkerWindow()
        self.find_worker_window.show()
        self.hide()

    def sort_workers_ui(self):
        self.sort_workers_window = SortWorkersWindow()
        self.sort_workers_window.show()
        self.hide()

    def back_to_main(self):
        self.main_window = UniversityManagementApp()
        self.main_window.show()
        self.close()

class AddWorkerWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Add Worker')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        self.name_input = QLineEdit(self)
        self.name_input.setPlaceholderText("Enter worker name")
        layout.addWidget(self.name_input)

        self.id_input = QLineEdit(self)
        self.id_input.setPlaceholderText("Enter worker ID")
        layout.addWidget(self.id_input)

        self.dob_input = QLineEdit(self)
        self.dob_input.setPlaceholderText("Enter worker's date of birth")
        layout.addWidget(self.dob_input)

        self.nat_input = QLineEdit(self)
        self.nat_input.setPlaceholderText("Enter worker's nationality")
        layout.addWidget(self.nat_input)

        self.gender_input = QLineEdit(self)
        self.gender_input.setPlaceholderText("Enter worker's gender")
        layout.addWidget(self.gender_input)

        add_button = QPushButton("Add Worker", self)
        add_button.setFont(BUTTON_FONT)
        add_button.clicked.connect(self.add_worker)
        layout.addWidget(add_button)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def add_worker(self):
        name = self.name_input.text()
        wid = self.id_input.text()
        dob = self.dob_input.text()
        nat = self.nat_input.text()
        gender = self.gender_input.text()
        new_worker = Worker(name, int(wid), dob, nat, gender)
        add_worker(new_worker)
        QMessageBox.information(self, "Success", "Worker added successfully!")

    def back_to_options(self):
        self.main_window = WorkerManagementWindow()
        self.main_window.show()
        self.close()

class FindWorkerWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Find Worker')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        self.search_input = QLineEdit(self)
        self.search_input.setPlaceholderText("Enter worker name or ID")
        layout.addWidget(self.search_input)

        find_button = QPushButton("Find Worker", self)
        find_button.setFont(BUTTON_FONT)
        find_button.clicked.connect(self.find_worker)
        layout.addWidget(find_button)

        self.result_label = QLabel("", self)
        self.result_label.setFont(BUTTON_FONT)
        layout.addWidget(self.result_label)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def find_worker(self):
        search_term = self.search_input.text()
        if search_term.isdigit():
            result = find_worker_by_id(int(search_term))
        else:
            result = find_worker_by_name(search_term)
        self.result_label.setText(result if result else "Worker not found")

    def back_to_options(self):
        self.main_window = WorkerManagementWindow()
        self.main_window.show()
        self.close()

class SortWorkersWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Sort Workers')
        self.setGeometry(WINDOW_X, WINDOW_Y, SUBWINDOW_WIDTH, SUBWINDOW_HEIGHT)

        layout = QVBoxLayout()

        sort_name_button = QPushButton("Sort by Name", self)
        sort_name_button.setFont(BUTTON_FONT)
        sort_name_button.clicked.connect(self.sort_by_name)
        layout.addWidget(sort_name_button)

        sort_id_button = QPushButton("Sort by ID", self)
        sort_id_button.setFont(BUTTON_FONT)
        sort_id_button.clicked.connect(self.sort_by_id)
        layout.addWidget(sort_id_button)

        back_button = QPushButton("Back", self)
        back_button.setFont(BUTTON_FONT)
        back_button.clicked.connect(self.back_to_options)
        layout.addWidget(back_button)

        self.setLayout(layout)

    def sort_by_name(self):
        sort_worker_by_name()
        QMessageBox.information(self, "Success", "Workers sorted by name!")

    def sort_by_id(self):
        sort_worker_by_id()
        QMessageBox.information(self, "Success", "Workers sorted by ID!")

    def back_to_options(self):
        self.main_window = WorkerManagementWindow()
        self.main_window.show()
        self.close()

# Initialize the app
if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = UniversityManagementApp()
    main_window.show()
    sys.exit(app.exec_())

